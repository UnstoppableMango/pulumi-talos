// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace client {
    export interface ConfigurationClientConfiguration {
        /**
         * The client CA certificate
         */
        caCertificate: string;
        /**
         * The client certificate
         */
        clientCertificate: string;
        /**
         * The client key
         */
        clientKey: string;
    }

}

export namespace cluster {
    export interface KubeconfigClientConfiguration {
        /**
         * The client CA certificate
         */
        caCertificate: string;
        /**
         * The client certificate
         */
        clientCertificate: string;
        /**
         * The client key
         */
        clientKey: string;
    }

    export interface KubeconfigKubernetesClientConfiguration {
        /**
         * The kubernetes CA certificate
         */
        caCertificate: string;
        /**
         * The kubernetes client certificate
         */
        clientCertificate: string;
        /**
         * The kubernetes client key
         */
        clientKey: string;
        /**
         * The kubernetes host
         */
        host: string;
    }

}

export namespace machine {
    export interface BootstrapClientConfiguration {
        /**
         * The client CA certificate
         */
        caCertificate: string;
        /**
         * The client certificate
         */
        clientCertificate: string;
        /**
         * The client key
         */
        clientKey: string;
    }

    export interface ConfigurationApplyClientConfiguration {
        /**
         * The client CA certificate
         */
        caCertificate: string;
        /**
         * The client certificate
         */
        clientCertificate: string;
        /**
         * The client key
         */
        clientKey: string;
    }

    export interface ConfigurationMachineSecrets {
        /**
         * The certs for the talos kubernetes cluster
         */
        certs: outputs.machine.ConfigurationMachineSecretsCerts;
        /**
         * The cluster secrets
         */
        cluster: outputs.machine.ConfigurationMachineSecretsCluster;
        /**
         * The secrets for the talos kubernetes cluster
         */
        secrets: outputs.machine.ConfigurationMachineSecretsSecrets;
        /**
         * The trustd info for the talos kubernetes cluster
         */
        trustdinfo: outputs.machine.ConfigurationMachineSecretsTrustdinfo;
    }

    export interface ConfigurationMachineSecretsCerts {
        etcd: outputs.machine.ConfigurationMachineSecretsCertsEtcd;
        k8s: outputs.machine.ConfigurationMachineSecretsCertsK8s;
        k8sAggregator: outputs.machine.ConfigurationMachineSecretsCertsK8sAggregator;
        k8sServiceaccount: outputs.machine.ConfigurationMachineSecretsCertsK8sServiceaccount;
        os: outputs.machine.ConfigurationMachineSecretsCertsOs;
    }

    export interface ConfigurationMachineSecretsCertsEtcd {
        cert: string;
        key: string;
    }

    export interface ConfigurationMachineSecretsCertsK8s {
        cert: string;
        key: string;
    }

    export interface ConfigurationMachineSecretsCertsK8sAggregator {
        cert: string;
        key: string;
    }

    export interface ConfigurationMachineSecretsCertsK8sServiceaccount {
        key: string;
    }

    export interface ConfigurationMachineSecretsCertsOs {
        cert: string;
        key: string;
    }

    export interface ConfigurationMachineSecretsCluster {
        /**
         * The ID of this resource.
         */
        id: string;
        secret: string;
    }

    export interface ConfigurationMachineSecretsSecrets {
        aescbcEncryptionSecret?: string;
        bootstrapToken: string;
        secretboxEncryptionSecret: string;
    }

    export interface ConfigurationMachineSecretsTrustdinfo {
        token: string;
    }

    export interface SecretsClientConfiguration {
        /**
         * The client CA certificate
         */
        caCertificate: string;
        /**
         * The client certificate
         */
        clientCertificate: string;
        /**
         * The client key
         */
        clientKey: string;
    }

    export interface SecretsMachineSecrets {
        certs: outputs.machine.SecretsMachineSecretsCerts;
        /**
         * The cluster secrets
         */
        cluster: outputs.machine.SecretsMachineSecretsCluster;
        /**
         * kubernetes cluster secrets
         */
        secrets: outputs.machine.SecretsMachineSecretsSecrets;
        /**
         * trustd secrets
         */
        trustdinfo: outputs.machine.SecretsMachineSecretsTrustdinfo;
    }

    export interface SecretsMachineSecretsCerts {
        etcd: outputs.machine.SecretsMachineSecretsCertsEtcd;
        k8s: outputs.machine.SecretsMachineSecretsCertsK8s;
        k8sAggregator: outputs.machine.SecretsMachineSecretsCertsK8sAggregator;
        k8sServiceaccount: outputs.machine.SecretsMachineSecretsCertsK8sServiceaccount;
        os: outputs.machine.SecretsMachineSecretsCertsOs;
    }

    export interface SecretsMachineSecretsCertsEtcd {
        cert: string;
        key: string;
    }

    export interface SecretsMachineSecretsCertsK8s {
        cert: string;
        key: string;
    }

    export interface SecretsMachineSecretsCertsK8sAggregator {
        cert: string;
        key: string;
    }

    export interface SecretsMachineSecretsCertsK8sServiceaccount {
        key: string;
    }

    export interface SecretsMachineSecretsCertsOs {
        cert: string;
        key: string;
    }

    export interface SecretsMachineSecretsCluster {
        /**
         * The computed ID of the Talos cluster
         */
        id: string;
        secret: string;
    }

    export interface SecretsMachineSecretsSecrets {
        aescbcEncryptionSecret: string;
        bootstrapToken: string;
        secretboxEncryptionSecret: string;
    }

    export interface SecretsMachineSecretsTrustdinfo {
        token: string;
    }

}
