# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'BootstrapClientConfiguration',
    'ConfigurationApplyClientConfiguration',
    'ConfigurationMachineSecretsResult',
    'ConfigurationMachineSecretsCertsResult',
    'ConfigurationMachineSecretsCertsEtcdResult',
    'ConfigurationMachineSecretsCertsK8sResult',
    'ConfigurationMachineSecretsCertsK8sAggregatorResult',
    'ConfigurationMachineSecretsCertsK8sServiceaccountResult',
    'ConfigurationMachineSecretsCertsOsResult',
    'ConfigurationMachineSecretsClusterResult',
    'ConfigurationMachineSecretsSecretsResult',
    'ConfigurationMachineSecretsTrustdinfoResult',
    'SecretsClientConfiguration',
    'SecretsMachineSecrets',
    'SecretsMachineSecretsCerts',
    'SecretsMachineSecretsCertsEtcd',
    'SecretsMachineSecretsCertsK8s',
    'SecretsMachineSecretsCertsK8sAggregator',
    'SecretsMachineSecretsCertsK8sServiceaccount',
    'SecretsMachineSecretsCertsOs',
    'SecretsMachineSecretsCluster',
    'SecretsMachineSecretsSecrets',
    'SecretsMachineSecretsTrustdinfo',
]

@pulumi.output_type
class BootstrapClientConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BootstrapClientConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BootstrapClientConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BootstrapClientConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str):
        """
        :param str ca_certificate: The client CA certificate
        :param str client_certificate: The client certificate
        :param str client_key: The client key
        """
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        """
        The client CA certificate
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        """
        The client certificate
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        """
        The client key
        """
        return pulumi.get(self, "client_key")


@pulumi.output_type
class ConfigurationApplyClientConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationApplyClientConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationApplyClientConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationApplyClientConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: str,
                 client_certificate: str,
                 client_key: str):
        """
        :param str ca_certificate: The client CA certificate
        :param str client_certificate: The client certificate
        :param str client_key: The client key
        """
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> str:
        """
        The client CA certificate
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> str:
        """
        The client certificate
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> str:
        """
        The client key
        """
        return pulumi.get(self, "client_key")


@pulumi.output_type
class ConfigurationMachineSecretsResult(dict):
    def __init__(__self__, *,
                 certs: 'outputs.ConfigurationMachineSecretsCertsResult',
                 cluster: 'outputs.ConfigurationMachineSecretsClusterResult',
                 secrets: 'outputs.ConfigurationMachineSecretsSecretsResult',
                 trustdinfo: 'outputs.ConfigurationMachineSecretsTrustdinfoResult'):
        """
        :param 'ConfigurationMachineSecretsCertsArgs' certs: The certs for the talos kubernetes cluster
        :param 'ConfigurationMachineSecretsClusterArgs' cluster: The cluster secrets
        :param 'ConfigurationMachineSecretsSecretsArgs' secrets: The secrets for the talos kubernetes cluster
        :param 'ConfigurationMachineSecretsTrustdinfoArgs' trustdinfo: The trustd info for the talos kubernetes cluster
        """
        pulumi.set(__self__, "certs", certs)
        pulumi.set(__self__, "cluster", cluster)
        pulumi.set(__self__, "secrets", secrets)
        pulumi.set(__self__, "trustdinfo", trustdinfo)

    @property
    @pulumi.getter
    def certs(self) -> 'outputs.ConfigurationMachineSecretsCertsResult':
        """
        The certs for the talos kubernetes cluster
        """
        return pulumi.get(self, "certs")

    @property
    @pulumi.getter
    def cluster(self) -> 'outputs.ConfigurationMachineSecretsClusterResult':
        """
        The cluster secrets
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def secrets(self) -> 'outputs.ConfigurationMachineSecretsSecretsResult':
        """
        The secrets for the talos kubernetes cluster
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def trustdinfo(self) -> 'outputs.ConfigurationMachineSecretsTrustdinfoResult':
        """
        The trustd info for the talos kubernetes cluster
        """
        return pulumi.get(self, "trustdinfo")


@pulumi.output_type
class ConfigurationMachineSecretsCertsResult(dict):
    def __init__(__self__, *,
                 etcd: 'outputs.ConfigurationMachineSecretsCertsEtcdResult',
                 k8s: 'outputs.ConfigurationMachineSecretsCertsK8sResult',
                 k8s_aggregator: 'outputs.ConfigurationMachineSecretsCertsK8sAggregatorResult',
                 k8s_serviceaccount: 'outputs.ConfigurationMachineSecretsCertsK8sServiceaccountResult',
                 os: 'outputs.ConfigurationMachineSecretsCertsOsResult'):
        pulumi.set(__self__, "etcd", etcd)
        pulumi.set(__self__, "k8s", k8s)
        pulumi.set(__self__, "k8s_aggregator", k8s_aggregator)
        pulumi.set(__self__, "k8s_serviceaccount", k8s_serviceaccount)
        pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def etcd(self) -> 'outputs.ConfigurationMachineSecretsCertsEtcdResult':
        return pulumi.get(self, "etcd")

    @property
    @pulumi.getter
    def k8s(self) -> 'outputs.ConfigurationMachineSecretsCertsK8sResult':
        return pulumi.get(self, "k8s")

    @property
    @pulumi.getter(name="k8sAggregator")
    def k8s_aggregator(self) -> 'outputs.ConfigurationMachineSecretsCertsK8sAggregatorResult':
        return pulumi.get(self, "k8s_aggregator")

    @property
    @pulumi.getter(name="k8sServiceaccount")
    def k8s_serviceaccount(self) -> 'outputs.ConfigurationMachineSecretsCertsK8sServiceaccountResult':
        return pulumi.get(self, "k8s_serviceaccount")

    @property
    @pulumi.getter
    def os(self) -> 'outputs.ConfigurationMachineSecretsCertsOsResult':
        return pulumi.get(self, "os")


@pulumi.output_type
class ConfigurationMachineSecretsCertsEtcdResult(dict):
    def __init__(__self__, *,
                 cert: str,
                 key: str):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ConfigurationMachineSecretsCertsK8sResult(dict):
    def __init__(__self__, *,
                 cert: str,
                 key: str):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ConfigurationMachineSecretsCertsK8sAggregatorResult(dict):
    def __init__(__self__, *,
                 cert: str,
                 key: str):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ConfigurationMachineSecretsCertsK8sServiceaccountResult(dict):
    def __init__(__self__, *,
                 key: str):
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ConfigurationMachineSecretsCertsOsResult(dict):
    def __init__(__self__, *,
                 cert: str,
                 key: str):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> str:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class ConfigurationMachineSecretsClusterResult(dict):
    def __init__(__self__, *,
                 id: str,
                 secret: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")


@pulumi.output_type
class ConfigurationMachineSecretsSecretsResult(dict):
    def __init__(__self__, *,
                 bootstrap_token: str,
                 secretbox_encryption_secret: str,
                 aescbc_encryption_secret: Optional[str] = None):
        pulumi.set(__self__, "bootstrap_token", bootstrap_token)
        pulumi.set(__self__, "secretbox_encryption_secret", secretbox_encryption_secret)
        if aescbc_encryption_secret is not None:
            pulumi.set(__self__, "aescbc_encryption_secret", aescbc_encryption_secret)

    @property
    @pulumi.getter(name="bootstrapToken")
    def bootstrap_token(self) -> str:
        return pulumi.get(self, "bootstrap_token")

    @property
    @pulumi.getter(name="secretboxEncryptionSecret")
    def secretbox_encryption_secret(self) -> str:
        return pulumi.get(self, "secretbox_encryption_secret")

    @property
    @pulumi.getter(name="aescbcEncryptionSecret")
    def aescbc_encryption_secret(self) -> Optional[str]:
        return pulumi.get(self, "aescbc_encryption_secret")


@pulumi.output_type
class ConfigurationMachineSecretsTrustdinfoResult(dict):
    def __init__(__self__, *,
                 token: str):
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> str:
        return pulumi.get(self, "token")


@pulumi.output_type
class SecretsClientConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"
        elif key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "clientKey":
            suggest = "client_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretsClientConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretsClientConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretsClientConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None,
                 client_certificate: Optional[str] = None,
                 client_key: Optional[str] = None):
        """
        :param str ca_certificate: The client CA certificate
        :param str client_certificate: The client certificate
        :param str client_key: The client key
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        The client CA certificate
        """
        return pulumi.get(self, "ca_certificate")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        """
        The client certificate
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[str]:
        """
        The client key
        """
        return pulumi.get(self, "client_key")


@pulumi.output_type
class SecretsMachineSecrets(dict):
    def __init__(__self__, *,
                 certs: Optional['outputs.SecretsMachineSecretsCerts'] = None,
                 cluster: Optional['outputs.SecretsMachineSecretsCluster'] = None,
                 secrets: Optional['outputs.SecretsMachineSecretsSecrets'] = None,
                 trustdinfo: Optional['outputs.SecretsMachineSecretsTrustdinfo'] = None):
        """
        :param 'SecretsMachineSecretsClusterArgs' cluster: The cluster secrets
        :param 'SecretsMachineSecretsSecretsArgs' secrets: kubernetes cluster secrets
        :param 'SecretsMachineSecretsTrustdinfoArgs' trustdinfo: trustd secrets
        """
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if cluster is not None:
            pulumi.set(__self__, "cluster", cluster)
        if secrets is not None:
            pulumi.set(__self__, "secrets", secrets)
        if trustdinfo is not None:
            pulumi.set(__self__, "trustdinfo", trustdinfo)

    @property
    @pulumi.getter
    def certs(self) -> Optional['outputs.SecretsMachineSecretsCerts']:
        return pulumi.get(self, "certs")

    @property
    @pulumi.getter
    def cluster(self) -> Optional['outputs.SecretsMachineSecretsCluster']:
        """
        The cluster secrets
        """
        return pulumi.get(self, "cluster")

    @property
    @pulumi.getter
    def secrets(self) -> Optional['outputs.SecretsMachineSecretsSecrets']:
        """
        kubernetes cluster secrets
        """
        return pulumi.get(self, "secrets")

    @property
    @pulumi.getter
    def trustdinfo(self) -> Optional['outputs.SecretsMachineSecretsTrustdinfo']:
        """
        trustd secrets
        """
        return pulumi.get(self, "trustdinfo")


@pulumi.output_type
class SecretsMachineSecretsCerts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "k8sAggregator":
            suggest = "k8s_aggregator"
        elif key == "k8sServiceaccount":
            suggest = "k8s_serviceaccount"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretsMachineSecretsCerts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretsMachineSecretsCerts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretsMachineSecretsCerts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 etcd: Optional['outputs.SecretsMachineSecretsCertsEtcd'] = None,
                 k8s: Optional['outputs.SecretsMachineSecretsCertsK8s'] = None,
                 k8s_aggregator: Optional['outputs.SecretsMachineSecretsCertsK8sAggregator'] = None,
                 k8s_serviceaccount: Optional['outputs.SecretsMachineSecretsCertsK8sServiceaccount'] = None,
                 os: Optional['outputs.SecretsMachineSecretsCertsOs'] = None):
        if etcd is not None:
            pulumi.set(__self__, "etcd", etcd)
        if k8s is not None:
            pulumi.set(__self__, "k8s", k8s)
        if k8s_aggregator is not None:
            pulumi.set(__self__, "k8s_aggregator", k8s_aggregator)
        if k8s_serviceaccount is not None:
            pulumi.set(__self__, "k8s_serviceaccount", k8s_serviceaccount)
        if os is not None:
            pulumi.set(__self__, "os", os)

    @property
    @pulumi.getter
    def etcd(self) -> Optional['outputs.SecretsMachineSecretsCertsEtcd']:
        return pulumi.get(self, "etcd")

    @property
    @pulumi.getter
    def k8s(self) -> Optional['outputs.SecretsMachineSecretsCertsK8s']:
        return pulumi.get(self, "k8s")

    @property
    @pulumi.getter(name="k8sAggregator")
    def k8s_aggregator(self) -> Optional['outputs.SecretsMachineSecretsCertsK8sAggregator']:
        return pulumi.get(self, "k8s_aggregator")

    @property
    @pulumi.getter(name="k8sServiceaccount")
    def k8s_serviceaccount(self) -> Optional['outputs.SecretsMachineSecretsCertsK8sServiceaccount']:
        return pulumi.get(self, "k8s_serviceaccount")

    @property
    @pulumi.getter
    def os(self) -> Optional['outputs.SecretsMachineSecretsCertsOs']:
        return pulumi.get(self, "os")


@pulumi.output_type
class SecretsMachineSecretsCertsEtcd(dict):
    def __init__(__self__, *,
                 cert: Optional[str] = None,
                 key: Optional[str] = None):
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class SecretsMachineSecretsCertsK8s(dict):
    def __init__(__self__, *,
                 cert: Optional[str] = None,
                 key: Optional[str] = None):
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class SecretsMachineSecretsCertsK8sAggregator(dict):
    def __init__(__self__, *,
                 cert: Optional[str] = None,
                 key: Optional[str] = None):
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class SecretsMachineSecretsCertsK8sServiceaccount(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class SecretsMachineSecretsCertsOs(dict):
    def __init__(__self__, *,
                 cert: Optional[str] = None,
                 key: Optional[str] = None):
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> Optional[str]:
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")


@pulumi.output_type
class SecretsMachineSecretsCluster(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 secret: Optional[str] = None):
        """
        :param str id: The computed ID of the Talos cluster
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The computed ID of the Talos cluster
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def secret(self) -> Optional[str]:
        return pulumi.get(self, "secret")


@pulumi.output_type
class SecretsMachineSecretsSecrets(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aescbcEncryptionSecret":
            suggest = "aescbc_encryption_secret"
        elif key == "bootstrapToken":
            suggest = "bootstrap_token"
        elif key == "secretboxEncryptionSecret":
            suggest = "secretbox_encryption_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecretsMachineSecretsSecrets. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecretsMachineSecretsSecrets.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecretsMachineSecretsSecrets.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aescbc_encryption_secret: Optional[str] = None,
                 bootstrap_token: Optional[str] = None,
                 secretbox_encryption_secret: Optional[str] = None):
        if aescbc_encryption_secret is not None:
            pulumi.set(__self__, "aescbc_encryption_secret", aescbc_encryption_secret)
        if bootstrap_token is not None:
            pulumi.set(__self__, "bootstrap_token", bootstrap_token)
        if secretbox_encryption_secret is not None:
            pulumi.set(__self__, "secretbox_encryption_secret", secretbox_encryption_secret)

    @property
    @pulumi.getter(name="aescbcEncryptionSecret")
    def aescbc_encryption_secret(self) -> Optional[str]:
        return pulumi.get(self, "aescbc_encryption_secret")

    @property
    @pulumi.getter(name="bootstrapToken")
    def bootstrap_token(self) -> Optional[str]:
        return pulumi.get(self, "bootstrap_token")

    @property
    @pulumi.getter(name="secretboxEncryptionSecret")
    def secretbox_encryption_secret(self) -> Optional[str]:
        return pulumi.get(self, "secretbox_encryption_secret")


@pulumi.output_type
class SecretsMachineSecretsTrustdinfo(dict):
    def __init__(__self__, *,
                 token: Optional[str] = None):
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter
    def token(self) -> Optional[str]:
        return pulumi.get(self, "token")


